/*****************
 * Color Chooser *
 *****************/

GtkColorSwatch {
  // This widget is made of two boxes one on top of the other, the lower box is GtkColorSwatch {} the other one
  // is GtkColorSwatch > .overlay {}, GtkColorSwatch has the programmatically set background, so most of the style
  // is applied to the overlay box.

  $_colorswatch_radius: 4px;

  box-shadow: none;

  // take care of colorswatches on selected elements
  :selected & {
    box-shadow: none;
    &.overlay, &.overlay:hover {
      border-color: $selected_fg_color;
    }
  }

  // we need to re-set the shadow here since it get axed by the previous bit
  &:selected { box-shadow: none; }
  &:insensitive {
    box-shadow: none;
    opacity: 0.5;
  }

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.
  // The :not() madness is needed since actually the overlay is selectable by GtkColorSwatch > .overlay
  // and GtkColorSwatch.overlay, I know it's weird, but this is gtk+, not a browser.
  &.top {
    border-top-left-radius: $_colorswatch-radius + 1px;
    border-top-right-radius: $_colorswatch-radius + 1px;
  }
  &.bottom {
    border-bottom-left-radius: $_colorswatch-radius + 1px;
    border-bottom-right-radius: $_colorswatch-radius + 1px;
  }
  &.left, &:first-child:not(.overlay):not(.top) {
    border-top-left-radius: $_colorswatch-radius + 1px;
    border-bottom-left-radius: $_colorswatch-radius + 1px;
  }
  &.right, &:last-child:not(.overlay):not(.bottom) {
    border-top-right-radius: $_colorswatch-radius + 1px;
    border-bottom-right-radius: $_colorswatch-radius + 1px;
  }
  &:only-child:not(.overlay) { border-radius: $_colorswatch-radius + 1px; }

  // overlay corner rounding
  &.top > .overlay {
    border-top-left-radius: $_colorswatch-radius;
    border-top-right-radius: $_colorswatch-radius;
  }
  &.bottom > .overlay {
    border-bottom-left-radius: $_colorswatch-radius;
    border-bottom-right-radius: $_colorswatch-radius;
  }
  &:first-child:not(.top) > .overlay {
    border-top-left-radius: $_colorswatch-radius;
    border-bottom-left-radius: $_colorswatch-radius;
  }
  &:last-child:not(.bottom) > .overlay {
    border-top-right-radius: $_colorswatch-radius;
    border-bottom-right-radius: $_colorswatch-radius;
  }
  &:only-child > .overlay { border-radius: $_colorswatch-radius; }

  // hover effect
  &:backdrop,
  &:backdrop:selected
  &.color-dark:backdrop,
  &.color-dark:backdrop:selected {
    background-image: none;
    box-shadow: none;
  }

  // no hover effect for the colorswatch in the color editor
  GtkColorEditor & {
    border-radius: 3px; // same radius as the entry
    &:hover {
      background-image: none;
      box-shadow: _widget_edge();
    }
    &:backdrop { box-shadow: none; }
  }

  // indicator and keynav outline colors
  &.color-dark {
    color: white;
    outline-color: transparentize(white, 0.5);
    &:backdrop { color: transparentize(white, 0.7); }
  }
  &.color-light {
    color: black;
    outline-color: transparentize(black, 0.5);
    &:backdrop { color: transparentize(black, 0.7); }
  }

  // border color
  &.overlay,
  &.overlay:selected {
    border: 1px solid if($variant == 'light', transparentize(black, 0.7), $borders_color);
    &:hover { border-color: if($variant == 'light', transparentize(black, 0.5), black); }
  }

  // make the add color button looks like, well, a button
  &#add-color-button {
    border-style: solid; // the borders are drawn by the overlay for standard colorswatches to have them semi
    border-width: 1px;   // translucent on the colored background, here it's not necessary so they need to be set
    @include button(normal);
    &:hover { @include button(hover); }
    &:backdrop { @include button(backdrop); }
    .overlay { @include button(undecorated); } // reset the overlay to not cover the button style underneat
  }
}
