/****************
 * Text Entries *
 ****************/

.entry {
  border: 1px solid;
  padding: 5px 8px 6px;

  &.image { // icons inside the entry
    &.left { padding-left: 0; }
    &.right { padding-right: 0; }
  }

  border-radius: 3px;
  transition: all 200ms $ease-out-quad;
  @include entry(normal);

  &.flat, &.flat:focus {
    padding: 2px;
    @include entry(normal, $edge:none);
    border: none;
    border-radius: 0;
  }

  &:focus { @include entry(focus); }
  &:insensitive { @include entry(insensitive); }
  &:backdrop { @include entry(backdrop); }
  &:backdrop:insensitive { @include entry(backdrop-insensitive); }

  &:selected,
  &:selected:focus {
    @extend %selected_items;
  }

  &.progressbar {
    margin: 1px;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: $selected_bg_color;
    border-style: solid;
    background-image: none;
    background-color: transparent;
    box-shadow: none;
    &:backdrop { background-color: transparent; }
  }

  .linked:not(.vertical) > & { @extend %linked; }

  .linked:not(.vertical) > &:focus + .entry,
  .linked:not(.vertical) > &:focus + .button,
  .linked:not(.vertical) > &:focus + GtkComboBox > .the-button-in-the-combobox,
  .linked:not(.vertical) > &:focus + GtkComboBoxText > .the-button-in-the-combobox {
    border-left-color: entry_focus_border(); // colors the border of the widget following a focused entry
  }

  .linked:not(.vertical) > &:focus { border-color: entry_focus_border(); }

  // entry error and warning style
  @each $e_type, $e_color in (error, $error_color),
                             (warning, $warning_color) {
    &.#{$e_type} {
      color: $e_color;
      border-color: entry_focus_border($e_color);
      &:focus { @include entry(focus, $e_color); }
      &:selected, &:selected:focus { background-color: $e_color; }
    }
  }

  &.image { // entry icons colors
    color: mix($fg_color, $base_color, 80%);
    &:hover { color: $fg_color; }
    &:active { color: $selected_bg_color; }
    &:backdrop { color: mix($backdrop_fg_color, $backdrop_base_color, 80%); }
  }

  .osd & {
    @include entry(osd);
    &:focus { @include entry(osd-focus); }
    &:backdrop { @include entry(osd-backdrop); }
    &:insensitive { @include entry(osd-insensitive); }
  }
}

// Vertically linked entries
// FIXME: take care of "colored" entries
.linked.vertical {
  > .entry { @extend %linked_vertical; }

  // remove the edge hilight and the focus shadow (unfortunatelly)
  > .entry:not(:last-child) { box-shadow: none; }
  // add back the focus shadow

  // brighter border between linked entries
  > .entry:not(:insensitive) + .entry:not(:insensitive) {
    border-top-color: mix($borders_color, $base_color, 30%);
    background-image: linear-gradient(to bottom, $base_color);
    &:backdrop {
      border-top-color: mix($backdrop_borders_color, $backdrop_base_color, 30%);
      background-image: linear-gradient(to bottom, $backdrop_base_color);
    }
  }

  // color back the top border of a linked focused entry following another entry and add back the focus shadow.
  > .entry + .entry:focus:not(:last-child) {
    border-top-color: entry_focus_border();
  }
  // just recolor the top border on the last focused entry, since we don't reset the shadow here letting that be
  // inherited by the entry styling.
  > .entry + .entry:focus:last-child {
    border-top-color: entry_focus_border();
  }

  // this takes care of coloring the top border of the focused entry subsequent widget.
  // :not(:only-child) is a specificity bump hack.
  > .entry:focus:not(:only-child) + .entry,
  > .entry:focus:not(:only-child) + .button,
  > .entry:focus:not(:only-child) + GtkComboBox > .the-button-in-the-combobox,
  > .entry:focus:not(:only-child) + GtkComboBoxText > .the-button-in-the-combobox { border-top-color: entry_focus_border(); }
}
